// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace PillSpot.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250220042816_AddBDAttribute")]
    partial class AddBDAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Batch", b =>
                {
                    b.Property<ulong>("BatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("BatchID"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("BatchID");

                    b.HasIndex("BatchNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Batch_BatchNumber");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Batch_IsDeleted");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.HasKey("CategoryID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Category_IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Models.Chat", b =>
                {
                    b.Property<ulong>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("ChatId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ChatId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Chat_IsDeleted");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<short>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("CityId"));

                    b.Property<string>("CityNameAR")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CityNameEN")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("GovernmentId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CityId");

                    b.HasIndex("GovernmentId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_City_IsDeleted");

                    b.HasIndex("CityNameAR", "CityNameEN")
                        .IsUnique()
                        .HasDatabaseName("IX_City_Names");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Entities.Models.Doctor", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LicenseID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("UserID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Doctor_IsDeleted");

                    b.HasIndex("LicenseID")
                        .IsUnique()
                        .HasDatabaseName("IX_Doctor_LicenseID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Entities.Models.DoctorFeedback", b =>
                {
                    b.Property<ulong>("FeedbackID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_DoctorFeedback_UserID");

                    b.ToTable("DoctorFeedbacks");
                });

            modelBuilder.Entity("Entities.Models.DoctorPrescription", b =>
                {
                    b.Property<ulong>("PrescriptionID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorId")
                        .HasDatabaseName("IX_DP_DocId");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_DP_UsrID");

                    b.ToTable("DoctorPrescriptions");
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.Property<ulong>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("FeedbackID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("FeedbackID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Feedback_IsDeleted");

                    b.HasIndex("SenderID")
                        .HasDatabaseName("IX_Feedback_SenderID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.Government", b =>
                {
                    b.Property<short>("GovernmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<short>("GovernmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GovernmentNameAR")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("GovernmentNameEN")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("GovernmentId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Government_IsDeleted");

                    b.HasIndex("GovernmentNameAR", "GovernmentNameEN")
                        .IsUnique()
                        .HasDatabaseName("IX_Government_Names");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("Entities.Models.Ingredient", b =>
                {
                    b.Property<ulong>("IngredientsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("IngredientsID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.HasKey("IngredientsID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Ingredient_IsDeleted");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Ingredient_Name");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Entities.Models.Location", b =>
                {
                    b.Property<ulong>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("LocationId"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<short>("CityId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LocationId");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Location_IsDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("Longitude", "Latitude")
                        .HasDatabaseName("IX_Location_Coordinates");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Models.Message", b =>
                {
                    b.Property<ulong>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("MessageId"));

                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ChatId", "SentDate")
                        .HasDatabaseName("IX_Message_ChatId_SentDate");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<ulong>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("NotificationID"));

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNotified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NotifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("NotificationID");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("IX_Notification_ActorId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Notification_IsDeleted");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<ulong>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("OrderID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("LocationID")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Order_IsDeleted");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_Order_UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.Property<ulong>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("OrderItemID"));

                    b.Property<ulong>("OrderID")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PharmacyBranchID")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProductID")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemID");

                    b.HasIndex("PharmacyBranchID");

                    b.HasIndex("ProductID");

                    b.HasIndex("OrderID", "ProductID")
                        .HasDatabaseName("IX_OrderItem_OrderID_ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Entities.Models.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PermissionID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Permission_Name");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Property<ulong>("PharmacyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("PharmacyID"));

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DaysOpen")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOpen24")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LicenseID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<ulong>("LocationID")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("OwnerID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<ulong?>("ParentPharmacyID")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("PharmacyID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Pharmacy_IsDeleted");

                    b.HasIndex("LocationID");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Pharmacy_Name");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ParentPharmacyID");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Entities.Models.PharmacyEmployee", b =>
                {
                    b.Property<ulong>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("EmployeeID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("PharmacyID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PharmacyEmployee_IsDeleted");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("UserID", "PharmacyID")
                        .HasDatabaseName("IX_PharmacyEmployee_UserID_PharmacyID");

                    b.ToTable("PharmacyEmployees");
                });

            modelBuilder.Entity("Entities.Models.PharmacyEmployeePermission", b =>
                {
                    b.Property<ulong>("EmployeeID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("EmployeeID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("EmployeeID", "PermissionID")
                        .HasDatabaseName("IX_PharmacyEmployeePermission_EmployeeID_PermissionID");

                    b.ToTable("PharmacyEmployeePermissions");
                });

            modelBuilder.Entity("Entities.Models.PharmacyFeedback", b =>
                {
                    b.Property<ulong>("FeedbackID")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PharmacyID")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("FeedbackID");

                    b.HasIndex("PharmacyID")
                        .HasDatabaseName("IX_PharmacyFeedback_PharmacyID");

                    b.ToTable("PharmacyFeedbacks");
                });

            modelBuilder.Entity("Entities.Models.Prescription", b =>
                {
                    b.Property<ulong>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("PrescriptionID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Prescription_IsDeleted");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<ulong>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("ProductID"));

                    b.Property<string>("BarcodeImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SubCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Product_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Product_Name");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("Products");

                    b.HasDiscriminator().HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.ProductIngredient", b =>
                {
                    b.Property<ulong>("ProductID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(0);

                    b.Property<ulong>("IngredientsID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.HasKey("ProductID", "IngredientsID");

                    b.HasIndex("IngredientsID");

                    b.HasIndex("ProductID", "IngredientsID")
                        .HasDatabaseName("IX_ProductIngredient_ProductID_IngredientsID");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("Entities.Models.ProductPharmacy", b =>
                {
                    b.Property<ulong>("ProductID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(0);

                    b.Property<ulong>("PharmacyID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.Property<ulong>("BatchID")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("BatchID1")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "PharmacyID");

                    b.HasIndex("BatchID");

                    b.HasIndex("BatchID1");

                    b.HasIndex("PharmacyID");

                    b.HasIndex("ProductID", "PharmacyID")
                        .HasDatabaseName("IX_ProductPharmacy_ProductID_PharmacyID");

                    b.ToTable("ProductPharmacies");
                });

            modelBuilder.Entity("Entities.Models.ProductPrescription", b =>
                {
                    b.Property<ulong>("PrescriptionID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(0);

                    b.Property<ulong>("ProductID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.HasKey("PrescriptionID", "ProductID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PrescriptionID", "ProductID")
                        .HasDatabaseName("IX_ProductPrescription_PrescriptionID_ProductID");

                    b.ToTable("ProductPrescriptions");
                });

            modelBuilder.Entity("Entities.Models.SearchHistory", b =>
                {
                    b.Property<string>("SearchId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("varchar(255)");

                    b.HasKey("SearchId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_SearchHistory_IsDeleted");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_SearchHistory_UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Entities.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubCategoryID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.HasKey("SubCategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_SubCategory_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_SubCategory_Name");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Entities.Models.Support", b =>
                {
                    b.Property<ulong>("SupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("SupportID"));

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("IssueDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("varchar(450)");

                    b.HasKey("SupportID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Support_IsDeleted");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_Support_UserID");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)");

                    b.Property<ulong?>("LocationID")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationID")
                        .HasDatabaseName("IX_User_LocationID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserChat", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("UserID", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserID", "ChatId")
                        .HasDatabaseName("IX_UserChat_UserID_ChatId");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("Entities.Models.UserNotification", b =>
                {
                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(0);

                    b.Property<ulong>("NotificationID")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.HasKey("ReceiverId", "NotificationID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverId", "NotificationID")
                        .HasDatabaseName("IX_UserNotification_ReceiverId_NotificationID");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Entities.Models.UserPrescription", b =>
                {
                    b.Property<ulong>("PrescriptionID")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPrescriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fcf012c3-9ac6-4d43-a46a-3d47a93d6d91",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "33aee400-168f-40a4-9eed-5378fc24b2b8",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "b76d70c0-85a3-417b-844e-eb13fe561cf4",
                            Name = "PharmacyOwner",
                            NormalizedName = "PHARMACYOWNER"
                        },
                        new
                        {
                            Id = "962b52ff-bd2e-4b35-ae67-b2f6dd991574",
                            Name = "PharmacyManager",
                            NormalizedName = "PHARMACYMANAGER"
                        },
                        new
                        {
                            Id = "19301c17-5706-4a2b-9cd4-979f30dba5c3",
                            Name = "PharmacyEmployee",
                            NormalizedName = "PHARMACYEMPLOYEE"
                        },
                        new
                        {
                            Id = "d3b37367-19d6-4609-867a-a6621aeb2da9",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "5815d0a8-1f1d-457c-931d-89163fa32912",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Cosmetic", b =>
                {
                    b.HasBaseType("Entities.Models.Product");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SkinType")
                        .HasColumnType("int");

                    b.Property<string>("UsageInstructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasIndex("Brand")
                        .HasDatabaseName("IX_Cosmetic_Brand");

                    b.HasDiscriminator().HasValue("Cosmetic");
                });

            modelBuilder.Entity("Entities.Models.Medicine", b =>
                {
                    b.HasBaseType("Entities.Models.Product");

                    b.Property<float>("Dosage")
                        .HasColumnType("float");

                    b.Property<bool>("IsPrescriptionRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("varchar(500)");

                    b.HasIndex("Manufacturer")
                        .HasDatabaseName("IX_Medicine_Manufacturer");

                    b.HasDiscriminator().HasValue("Medicine");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.HasOne("Entities.Models.Government", "Government")
                        .WithMany("Cities")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("Entities.Models.Doctor", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Entities.Models.Doctor", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.DoctorFeedback", b =>
                {
                    b.HasOne("Entities.Models.Feedback", "Feedback")
                        .WithOne()
                        .HasForeignKey("Entities.Models.DoctorFeedback", "FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Entities.Models.DoctorPrescription", b =>
                {
                    b.HasOne("Entities.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Prescription", "Prescription")
                        .WithOne()
                        .HasForeignKey("Entities.Models.DoctorPrescription", "PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Prescription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.HasOne("Entities.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Entities.Models.Location", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Message", b =>
                {
                    b.HasOne("Entities.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.HasOne("Entities.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Pharmacy", "PharmacyBranch")
                        .WithMany()
                        .HasForeignKey("PharmacyBranchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PharmacyBranch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Pharmacy", "ParentPharmacy")
                        .WithMany("Branches")
                        .HasForeignKey("ParentPharmacyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("ParentPharmacy");
                });

            modelBuilder.Entity("Entities.Models.PharmacyEmployee", b =>
                {
                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("Employees")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.PharmacyEmployeePermission", b =>
                {
                    b.HasOne("Entities.Models.PharmacyEmployee", "PharmacyEmployee")
                        .WithMany("PharmacyEmployeePermissions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Permission", "Permission")
                        .WithMany("PharmacyEmployeePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PharmacyEmployee");
                });

            modelBuilder.Entity("Entities.Models.PharmacyFeedback", b =>
                {
                    b.HasOne("Entities.Models.Feedback", "Feedback")
                        .WithOne()
                        .HasForeignKey("Entities.Models.PharmacyFeedback", "FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Entities.Models.ProductIngredient", b =>
                {
                    b.HasOne("Entities.Models.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.ProductPharmacy", b =>
                {
                    b.HasOne("Entities.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Batch", null)
                        .WithMany("ProductPharmacies")
                        .HasForeignKey("BatchID1");

                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("ProductPharmacies")
                        .HasForeignKey("PharmacyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("ProductPharmacies")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.ProductPrescription", b =>
                {
                    b.HasOne("Entities.Models.Prescription", "Prescription")
                        .WithMany("ProductPrescriptions")
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.SearchHistory", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.SubCategory", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Support", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Entities.Models.UserChat", b =>
                {
                    b.HasOne("Entities.Models.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserNotification", b =>
                {
                    b.HasOne("Entities.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Entities.Models.UserPrescription", b =>
                {
                    b.HasOne("Entities.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Cosmetic", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithOne("Cosmetic")
                        .HasForeignKey("Entities.Models.Cosmetic", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Medicine", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithOne("Medicine")
                        .HasForeignKey("Entities.Models.Medicine", "ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Batch", b =>
                {
                    b.Navigation("ProductPharmacies");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Entities.Models.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("Entities.Models.Government", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Entities.Models.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Entities.Models.Permission", b =>
                {
                    b.Navigation("PharmacyEmployeePermissions");
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Employees");

                    b.Navigation("ProductPharmacies");
                });

            modelBuilder.Entity("Entities.Models.PharmacyEmployee", b =>
                {
                    b.Navigation("PharmacyEmployeePermissions");
                });

            modelBuilder.Entity("Entities.Models.Prescription", b =>
                {
                    b.Navigation("ProductPrescriptions");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Cosmetic")
                        .IsRequired();

                    b.Navigation("Medicine")
                        .IsRequired();

                    b.Navigation("ProductIngredients");

                    b.Navigation("ProductPharmacies");
                });

            modelBuilder.Entity("Entities.Models.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("SearchHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
