// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace PharmacyLocator.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240930141443_SeedPharmacyMedicineData2")]
    partial class SeedPharmacyMedicineData2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Bayer",
                            Description = "Pain reliever and anti-inflammatory",
                            Dosage = "500 mg",
                            Name = "Aspirin"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Advil",
                            Description = "Nonsteroidal anti-inflammatory drug (NSAID)",
                            Dosage = "200 mg",
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Tylenol",
                            Description = "Pain reliever and fever reducer",
                            Dosage = "500 mg",
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Amoxil",
                            Description = "Antibiotic used to treat bacterial infections",
                            Dosage = "250 mg",
                            Name = "Amoxicillin"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Zyrtec",
                            Description = "Antihistamine used for allergy relief",
                            Dosage = "10 mg",
                            Name = "Cetirizine"
                        });
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PharmacyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsOpen24Hours")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "195 Haram Street, El Haram, Giza",
                            City = "El Haram",
                            ContactNumber = "19600",
                            IsOpen24Hours = true,
                            Latitude = 12.203m,
                            Longitude = 2.3m,
                            Name = "El Ezaby",
                            OpeningHours = "24",
                            State = "Giza",
                            ZipCode = "2132"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Shop No. 7 Ground Floor, Triangle Area, Gamal AbdeNasser Square, Diplomats Area, Arabella Mall, 5thSettlement",
                            City = "FIFTH SETTLEMENT",
                            ContactNumber = "19600",
                            IsOpen24Hours = true,
                            Latitude = 22.203m,
                            Longitude = 3.3m,
                            Name = "Ezz Eldin",
                            OpeningHours = "24",
                            State = "Cairo",
                            ZipCode = "2132"
                        });
                });

            modelBuilder.Entity("Entities.Models.PharmacyMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PharmacyMedicineId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyMedicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastUpdated = new DateTime(2024, 9, 30, 14, 14, 42, 901, DateTimeKind.Utc).AddTicks(3504),
                            MedicineId = 1,
                            PharmacyId = 1,
                            Price = 4.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            LastUpdated = new DateTime(2024, 9, 30, 14, 14, 42, 901, DateTimeKind.Utc).AddTicks(3507),
                            MedicineId = 2,
                            PharmacyId = 1,
                            Price = 5.49m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            LastUpdated = new DateTime(2024, 9, 30, 14, 14, 42, 901, DateTimeKind.Utc).AddTicks(3508),
                            MedicineId = 1,
                            PharmacyId = 2,
                            Price = 4.99m,
                            StockQuantity = 20
                        });
                });

            modelBuilder.Entity("Entities.Models.SearchHistory", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchId"), 1L, 1);

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SearchId");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Entities.Models.PharmacyMedicine", b =>
                {
                    b.HasOne("Entities.Models.Medicine", "Medicine")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyMedicines")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Entities.Models.Medicine", b =>
                {
                    b.Navigation("PharmacyMedicines");
                });

            modelBuilder.Entity("Entities.Models.Pharmacy", b =>
                {
                    b.Navigation("PharmacyMedicines");
                });
#pragma warning restore 612, 618
        }
    }
}
